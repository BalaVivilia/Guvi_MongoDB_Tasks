Design database for Zen class programme
users
codekata
attendance
topics
tasks
company_drives
mentors


1.Find all the topics and tasks which are thought in the month of October
2.Find all the company drives which appeared between 15 oct-2020 and 31-oct-2020
3.Find all the company drives and students who are appeared for the placement.
4.Find the number of problems solved by the user in codekata 
5.Find all the mentors with who has the mentee's count more than 15
6.Find the number of users who are absent and task is not submitted  between 15 oct-2020 and 31-oct-2020




// inserting documents inside the users collection
-------------------------------------------------
db.users.insertMany([
  {
    "user-id": 1,
    "name": "user1",
    "email": "user1@gmail.com",
    "mentor-id": 1,
  },
  {
    "user-id": 2,
    "name": "user2",
    "email": "user2@gmail.com",
    "mentor-id": 1,
  },
  {
    "user-id": 3,
    "name": "user3",
    "email": "user3@gmail.com",
   " mentor-id": 1,
  },
  {
    "user-id": 4,
    "name": "user4",
    "email": "user4@gmail.com",
    "mentor-id": 2,
  },
  {
    "user-id": 5,
    "name": "user5",
    "email": "user5@gmail.com",
    "mentor-id": 2,
  },
]);



// inserting documents inside the codekata collection
-----------------------------------------------------
db.codekata.insertMany([
  {
    "user-id": 1,
    "no_of_problems_solved": 10,
  },
  {
    "user-id": 2,
    "no_of_problems_solved": 20,
  },
  {
    "user-id": 3,
    "no_of_problems_solved": 30,
  },
  {
    "user-id": 4,
    "no_of_problems_solved": 40,
  },
  {
    "user-id": 5,
    "no_of_problems_solved": 50,
  },
]);




// inserting documents inside the attendance collection
-------------------------------------------------------

db.attendance.insertMany([
  {
    "user-id": 1,
    "topic_id": 1,
    "present": true,
  },
  {
    "user-id": 2,
    "topic_id": 2,
   "present": true,
  },
  {
    "user-id": 3,
    "topic_id": 3,
    "present": false,
  },
  {
    "user-id": 4,
    "topic_id": 4,
    "present": false,
  },
  {
    "user-id": 5,
    "topic_id": 5,
    "present": false,
  },
]);

// inserting documents inside the topics collection
---------------------------------------------------
db.topics.insertMany([
  {
    "topic_id": 1,
    "topic": "HTML",
    "topic_date": new Date("2021-10-01"),
  },
  {
    "topic_id": 2,
    "topic": "CSS",
    "topic_date": new Date("2021-10-10"),
  },
  {
    "topic_id": 3,
    "topic": "Javascript",
    "topic_date": new Date("2021-10-15"),
  },
  {
    "topic_id": 4,
    "topic": "React",
    "topic_date": new Date("2021-10-20"),
  },
  {
    "topic_id": 5,
    "topic": "NodeJs",
    "topic_date": new Date("2021-10-25"),
  },
]);



// inserting documents inside the tasks collection
--------------------------------------------------
db.tasks.insertMany([
  {
    "task_id": 1,
    'topic_id': 1,
    "user-id": 1,
    "task": "HTML task",
    "due_date": new Date("2021-10-05"),
    "submitted": true,
  },
  {
    "task_id": 2,
    'topic_id': 2,
    "user-id": 2,
    "task": "CSS task",
    "due_date": new Date("2021-10-15"),
    "submitted": true,
  },
  {
    "task_id": 3,
    "topic_id": 3,
    "user-id": 3,
    "task": "Javascript task",
    "due_date": new Date("2021-10-20"),
    "submitted": false,
  },
  {
    "task_id": 4,
    "topic_id": 4,
    "user-id": 4,
    "task": "React task",
    "due_date": new Date("2021-10-25"),
    "submitted": false,
  },
  {
    "task_id": 5,
    "topic_id": 5,
    "user-id": 5,
    "task": "Node task",
    "due_date": new Date("2021-10-30"),
    'submitted': false,
  },
]);




// inserting documents inside the companydrives collection
---------------------------------------------------------
db.company_drives.insertMany([
  {
    "user-id": 1,
    "drive_date": new Date("2021-10-05"),
    "company_name": "Google",
  },
  {
    "user-id": 1,
    "drive_date": new Date("2021-10-10"),
    "company_name": "Amazon",
  },
  {
    "user-id": 2,
    "drive_date": new Date("2021-10-20"),
    "company_name": "Walmart",
  },
  {
    "user-id": 3,
    "drive_date": new Date("2021-10-15"),
    "company_name": "Zoho",
  },
  {
    "user-id": 4,
    "drive_date": new Date("2021-10-30"),
    "company_name": "Dell",
  },
]);




// inserting documents inside the mentors collection
----------------------------------------------------
db.mentors.insertMany([
  {
    "mentor-id": 1,
    "mentor_name": "mentor1",
    "mentor_email": "mentor1@gmail.com",
  },
  {
    "mentor-id": 2,
    "mentor_name": "mentor2",
    "mentor_email": "mentor2@gmail.com",
  },
  {
    "mentor-id": 3,
    "mentor_name": "mentor3",
    "mentor_email": "mentor3@gmail.com",
  },
  {
    "mentor-id": 4,
    "mentor_name": "mentor4",
    "mentor_email": "mentor4@gmail.com",
  },
  {
    "mentor-id": 5,
    "mentor_name": "mentor5",
    "mentor_email": "mentor4@gmail.com",
  },
]);

___________________________________________________________________________________________________________________________________________________________________



1.)Find all the topics and tasks which are thought in the month of October:
---------------------------------------------------------------------------
  
ANS:  // Assuming 'Topics' and 'Tasks' are the names of your collections

// Topics taught in October
db.Topics.find({
  // Assuming 'date' field represents the date the topic was taught
  "date": {
    $gte: ISODate("2020-10-01"),
    $lte: ISODate("2020-10-31")
  }
})

// Tasks assigned in October
db.Tasks.find({
  // Assuming 'deadline' field represents the task deadline
  "deadline": {
    $gte: ISODate("2020-10-01"),
    $lte: ISODate("2020-10-31")
  }
})

___________________________________________________________________________________________________________________________________________________________________________


2.)Find all the company drives which appeared between 15 oct-2020 and 31-oct-2020 :
----------------------------------------------------------------------------------

ANS:  // Assuming 'CompanyDrives' is the name of your collection

db.CompanyDrives.find({
  "date": {
    $gte: ISODate("2020-10-15"),
    $lte: ISODate("2020-10-31")
  }
})


___________________________________________________________________________________________________________________________________________________________________________

3.)Find all the company drives and students who are appeared for the placement:
------------------------------------------------------------------------------

ANS:  // Assuming 'CompanyDrives' and 'Users' are the names of your collections

db.CompanyDrives.find({
  // Assuming 'appeared_students' is an array field in 'CompanyDrives' containing user IDs who appeared for the placement
  "appeared_students": { $exists: true, $not: { $size: 0 } }
})

____________________________________________________________________________________________________________________________________________________________________________


4.)Find the number of problems solved by the user in codekata:
--------------------------------------------------------------

ANS:  // Assuming 'CodeKata' is the name of your collection

// Replace 'user_id' with the actual user ID you're interested in
var userId = ObjectId("user_id");

db.CodeKata.find({
  "user_id": userId
}).count()


____________________________________________________________________________________________________________________________________________________________________________

5.)Find all the mentors with who has the mentee's count more than 15 :
---------------------------------------------------------------------

ANS:   // Assuming 'Mentors' is the name of your collection

db.Mentors.find({
  $expr: { $gt: [{ $size: "$mentees" }, 15] }
})

___________________________________________________________________________________________________________________________________________________________________________

6.)Find the number of users who are absent and task is not submitted  between 15 oct-2020 and 31-oct-2020:
-----------------------------------------------------------------------------------------------------------

ANS:  // Assuming 'Attendance', 'Tasks', and 'Users' are the names of your collections

var startDate = ISODate("2020-10-15");
var endDate = ISODate("2020-10-31");

// Find absent users
var absentUsers = db.Attendance.find({
  "class_date": { $gte: startDate, $lte: endDate },
  "present": false
}).distinct("user_id");

// Find tasks not submitted by absent users
var tasksNotSubmitted = db.Tasks.find({
  "user_id": { $in: absentUsers },
  "deadline": { $gte: startDate, $lte: endDate }
}).count();


____________________________________________________________________________________________________________________________________________________________________________
